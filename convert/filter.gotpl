{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}
{{ reserveImport "strings"  }}
{{ reserveImport "github.com/randallmlough/gqlutils" }}
{{ reserveImport "github.com/vektah/gqlparser/v2" }}
{{ reserveImport "github.com/vektah/gqlparser/v2/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}

{{ reserveImport "github.com/ericlagergren/decimal" }}
{{ reserveImport "github.com/randallmlough/simmer/simmer" }}
{{ reserveImport "github.com/randallmlough/simmer/queries" }}
{{ reserveImport "github.com/randallmlough/simmer/queries/qm" }}
{{ reserveImport "github.com/randallmlough/simmer/queries" }}
{{ reserveImport "github.com/randallmlough/simmer/types" }}
{{ reserveImport "github.com/volatiletech/null/v8" }}


{{ reserveImport "database/sql" }}
{{ reserveImport  $.Backend.Directory }}
{{ reserveImport  $.Frontend.Directory }}


// const regexSign = `'`
const percentSign = `%`

func startsWithValue(v string) string { return   v + percentSign   }
func endsWithValue(v string) string   { return   percentSign + v  }
func containsValue(v string) string   { return   percentSign + v + percentSign   }

const isLike = " LIKE ?"
const in = " IN ?"
const notIn = " NOT IN ?"

func appendSubQuery(queryMods []queries.QueryMod, q *queries.Query) []queries.QueryMod {
	qs, args := queries.BuildQuery(q)
	qsClean := strings.TrimSuffix(qs, ";")
	return append(queryMods, queries.Where(fmt.Sprintf("EXISTS(%v)", qsClean), args...))
}

func BooleanFilterToMods(m *{{ $.Frontend.Package }}.BooleanFilter, column string) []queries.QueryMod {
	if m == nil {
		return nil
	}
	var queryMods []queries.QueryMod
	if m.EqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.EQ, *m.EqualTo))
	}
	if m.NotEqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.NEQ, *m.NotEqualTo))
	}
	return queryMods
}

func IDFilterToMods(m *{{ $.Frontend.Package }}.IDFilter, column string) []queries.QueryMod {
	if m == nil {
		return nil
	}
	var queryMods []queries.QueryMod
	{{- if .HasStringPrimaryIDs }}
	if m.EqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.EQ, *m.EqualTo))
	}
	if m.NotEqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.NEQ, *m.NotEqualTo))
	}
	if len(m.In) > 0 {
		queryMods = append(queryMods, queries.WhereIn(column + in, gqlutils.StringsToInterfaces(m.In)...))
	}
	if len(m.NotIn) > 0 {
		queryMods = append(queryMods, queries.WhereIn(column + notIn, gqlutils.StringsToInterfaces(m.NotIn)...))
	}
	{{- else }}
	if m.EqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.EQ, gqlutils.IDToBoiler(*m.EqualTo)))
	}
	if m.NotEqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.NEQ, gqlutils.IDToBoiler(*m.NotEqualTo)))
	}
	if len(m.In) > 0 {
		queryMods = append(queryMods, queries.WhereIn(column + in, gqlutils.IDsToBoilerInterfaces(m.In)...))
	}
	if len(m.NotIn) > 0 {
		queryMods = append(queryMods, queries.WhereIn(column + notIn, gqlutils.IDsToBoilerInterfaces(m.NotIn)...))
	}
	{{- end }}
	return queryMods
}



func StringFilterToMods(m *{{ $.Frontend.Package }}.StringFilter, column string) []queries.QueryMod {
	if m == nil {
		return nil
	}

	var queryMods []queries.QueryMod
	if m.EqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.EQ, *m.EqualTo))
	}
	if m.NotEqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.NEQ, *m.NotEqualTo))
	}

	lowerColumn := "LOWER("+column+")"
	if m.StartWith != nil {
		queryMods = append(queryMods, queries.Where(lowerColumn+isLike, startsWithValue(strings.ToLower(*m.StartWith))))
	}
	if m.EndWith != nil {
		queryMods = append(queryMods, queries.Where(lowerColumn+isLike, endsWithValue(strings.ToLower(*m.EndWith))))
	}
	if m.Contain != nil {
		queryMods = append(queryMods, queries.Where(lowerColumn+isLike, containsValue(strings.ToLower(*m.Contain))))
	}

	if m.StartWithStrict != nil {
		queryMods = append(queryMods, queries.Where(column+isLike, startsWithValue(*m.StartWithStrict)))
	}
	if m.EndWithStrict != nil {
		queryMods = append(queryMods, queries.Where(column+isLike, endsWithValue(*m.EndWithStrict)))
	}
	if m.ContainStrict != nil {
		queryMods = append(queryMods, queries.Where(column+isLike, containsValue(*m.ContainStrict)))
	}

	if len(m.In) > 0 {
		queryMods = append(queryMods, queries.WhereIn(column + in, gqlutils.IDsToBoilerInterfaces(m.In)...))
	}
	if len(m.NotIn) > 0 {
		queryMods = append(queryMods, queries.WhereIn(column + notIn, gqlutils.IDsToBoilerInterfaces(m.NotIn)...))
	}
	
	return queryMods
}


func FloatFilterToMods(m *{{ $.Frontend.Package }}.FloatFilter, column string) []queries.QueryMod {
	if m == nil {
		return nil
	}
	var queryMods []queries.QueryMod
	if m.EqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.EQ, *m.EqualTo))
	}
	if m.NotEqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.NEQ, *m.NotEqualTo))
	}
	if m.LessThan != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.LT, *m.LessThan))
	}
	if m.MoreThan != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.GT, *m.MoreThan))
	}
	if m.LessThanOrEqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.LTE, *m.LessThanOrEqualTo))
	}
	if m.MoreThanOrEqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.GTE, *m.MoreThanOrEqualTo))
	}
	if len(m.In) > 0 {
		queryMods = append(queryMods, queries.WhereIn(column + in, gqlutils.FloatsToInterfaces(m.In)...))
	}
	if len(m.NotIn) > 0 {
		queryMods = append(queryMods, queries.WhereIn(column + notIn, gqlutils.FloatsToInterfaces(m.NotIn)...))
	}
	return queryMods
}

func IntFilterToMods(m *{{ $.Frontend.Package }}.IntFilter, column string) []queries.QueryMod {
	if m == nil {
		return nil
	}
	var queryMods []queries.QueryMod
	if m.EqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.EQ, *m.EqualTo))
	}
	if m.NotEqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.NEQ, *m.NotEqualTo))
	}
	if m.LessThan != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.LT, *m.LessThan))
	}
	if m.MoreThan != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.GT, *m.MoreThan))
	}
	if m.LessThanOrEqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.LTE, *m.LessThanOrEqualTo))
	}
	if m.MoreThanOrEqualTo != nil {
		queryMods = append(queryMods, queries.WhereOp(column, queries.GTE, *m.MoreThanOrEqualTo))
	}
	if len(m.In) > 0 {
		queryMods = append(queryMods, queries.WhereIn(column + in, gqlutils.IntsToInterfaces(m.In)...))
	}
	if len(m.NotIn) > 0 {
		queryMods = append(queryMods, queries.WhereIn(column + notIn, gqlutils.IntsToInterfaces(m.NotIn)...))
	}
	return queryMods
}

{{ range $model := .Models }}
	{{with .Description }} {{.|prefixLines "// "}} {{end}}
	{{- if .IsFilter -}}
		func {{ .Name|go }}ToMods(m *{{ $.Frontend.Package }}.{{ .Name|go }}) []queries.QueryMod {
			if m == nil {
				return nil
			}
			if m.Search != nil || m.Where != nil {
				var queryMods []queries.QueryMod
				queryMods  = append(queryMods, {{ .BoilerModel.Name|go }}SearchToMods(m.Search)...)
				queryMods  = append(queryMods, {{ .BoilerModel.Name|go }}WhereToMods(m.Where, true)...)
				if len(queryMods) > 0 {
					return []queries.QueryMod{
						queries.Expr(queryMods...),
					}
				}
			}
			return nil
		}
		func {{ .BoilerModel.Name|go }}SearchToMods(search *string) []queries.QueryMod {
			// TODO: implement your own custom search here
			return nil
		}
	{{ end }}
	{{- if .IsWhere  -}}
		func {{ .Name|go }}SubqueryToMods(m *{{ $.Frontend.Package }}.{{ .Name|go }}, foreignColumn string) []queries.QueryMod {
			if m == nil {
				return nil
			}
			var queryMods []queries.QueryMod

			// if foreign key exist so we can filter on ID in the root table instead of subquery
			hasForeignKeyInRoot := foreignColumn != ""
			if hasForeignKeyInRoot {
				queryMods = append(queryMods, IDFilterToMods(m.ID, foreignColumn)...)
			}
		
			subQueryMods := {{ .Name|go }}ToMods(m, !hasForeignKeyInRoot)
			if len(subQueryMods) > 0 {
				subQuery := models.{{.BoilerModel.PluralName}}(append(subQueryMods, queries.Select("1"))...)
				queryMods = appendSubQuery(queryMods, subQuery.Query)
			}
			return queryMods
		} 
		
		func {{ .Name|go }}ToMods(m *{{ $.Frontend.Package }}.{{ .Name|go }}, withPrimaryID bool) []queries.QueryMod {
			if m == nil {
				return nil
			}
			var queryMods []queries.QueryMod
	
			{{ $model := . }}
			{{ range $field := .Fields }}
				{{-  if and $field.IsRelation $field.BoilerField.IsRelation }}
					{{- if  $field.IsPlural }}
						queryMods = append(queryMods, {{ $field.TypeWithoutPointer|go }}SubqueryToMods(m.{{ $field.Name|go }}, "")...)
					{{- else }}
						queryMods = append(queryMods, {{ $field.TypeWithoutPointer|go }}SubqueryToMods(m.{{ $field.Name|go }}, models.{{ $model.BoilerModel.Name }}Columns.{{ $field.BoilerField.Name }})...)
					{{- end }}
				{{-  else if $field.IsOr  }}
					if m.Or != nil {
						queryMods = append(queryMods, queries.Or2(queries.Expr({{ $field.TypeWithoutPointer|go }}ToMods(m.Or, true)...)))
					}
				{{-  else if $field.IsAnd  }}
					if m.And != nil {
						queryMods = append(queryMods, queries.Expr({{ $field.TypeWithoutPointer|go }}ToMods(m.And, true)...))
					}
				{{- else }}
					{{- if  $field.IsPrimaryID }}
					if withPrimaryID {
						queryMods = append(queryMods, {{ $field.TypeWithoutPointer|go }}ToMods(m.{{ $field.Name|go }}, models.{{ $model.BoilerModel.Name }}Columns.{{ $field.BoilerField.Name }})...)
					}
					{{- else }}
						queryMods = append(queryMods, {{ $field.TypeWithoutPointer|go }}ToMods(m.{{ $field.Name|go }}, models.{{ $model.BoilerModel.Name }}Columns.{{ $field.BoilerField.Name }})...)					
					{{- end }}
				{{- end -}}
			{{ end }}
			return queryMods
		}
	{{ end }}



{{- end }}
