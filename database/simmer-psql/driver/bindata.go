// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/models/17_upsert.go.tpl (6.088kB)
// override/models/singleton/psql_upsert.go.tpl (1.318kB)
// override/models_test/singleton/psql_main_test.go.tpl (4.974kB)
// override/models_test/singleton/psql_suites_test.go.tpl (265B)
// override/models_test/upsert.go.tpl (1.76kB)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _models17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x5f\x6f\xdb\x38\x12\x7f\x96\x3e\x05\x1b\x1c\x1a\xe9\xe0\x28\xf7\x9c\x83\x1f\xf2\xa7\xed\x05\xbd\xa4\xde\xa6\xd9\x02\x5b\x14\x01\x2d\x8d\x6c\x22\x14\xa9\x52\x54\x1c\xaf\xd7\xdf\x7d\x31\x43\x4a\x96\x6d\x39\x75\xff\xed\x16\xfb\x14\x8b\x1c\xce\xfc\x66\xe6\x37\x9c\x61\x16\x8b\x23\xf6\xaf\x8c\x5b\xce\x4e\x86\x2c\xb9\xc0\x1f\x47\xcb\x65\x48\xcb\x85\xce\x40\xd2\xfa\x15\xfd\x6a\x37\x74\x69\x85\x56\x15\x6d\xbd\xf1\xbf\xdb\x4d\x2e\x05\xa7\x2d\x52\x9b\x9c\xe2\x27\x54\xc9\x3b\x3e\x96\xe0\x75\xba\x8f\xe4\x9a\x17\xd0\x9c\xaa\xd2\x29\x14\xdc\x09\xe1\xd9\x4d\x39\xf6\x87\xd7\x77\xb3\x12\xa4\xb3\x22\x6f\xf1\x24\xa7\x59\xf6\x4a\xea\x31\x77\x50\x8f\x8f\xd9\x6d\x59\x81\xb1\xaf\x18\xb7\x16\x8a\xd2\x56\x8c\x2b\x26\x14\xae\x0d\x18\x57\x19\xcb\x34\xd0\x5a\x5d\x66\xdc\x02\xd3\x86\x89\x89\xd2\x06\x98\x56\x2c\xd5\x2a\x97\x22\xb5\x49\x98\xd7\x2a\x65\x91\x66\xff\x5e\x2c\x9c\x77\xc9\x6d\x79\x23\xd4\xa4\x96\xdc\x2c\x97\x71\x63\x25\x22\x30\x4a\xdb\x15\xa0\x6b\x7d\xae\x95\x85\x47\xbb\x5c\xa6\xf6\x11\x55\xe2\x47\xe2\x17\x07\x6c\xb1\x00\x95\x21\x58\x8f\xe0\x8d\x3a\xf7\x56\xd9\x58\x6b\x39\x68\x41\x9c\x6b\x59\x17\xaa\x62\x1f\x3e\x56\xd6\x08\x35\x19\xf8\x03\x7e\x7d\xe0\xbd\x6a\xc4\x2a\x51\x14\x60\x12\xff\x19\x33\x30\x46\x1b\xb6\x08\x03\x03\xb6\x36\x8a\xe9\xc4\x61\x8e\xd6\xe3\xd7\x81\xeb\x35\xbc\x02\x7b\x71\x16\xc5\x8b\x05\xc8\x0a\xc8\x89\x01\x5b\x6d\x79\x69\x2f\xa1\xb2\xe5\x72\xb0\xe5\xc8\x96\x0f\x4f\x43\x8f\xc3\x65\x18\xb6\x61\x09\x5d\x82\x31\x55\x3d\x49\xee\x2e\x8d\xb8\x12\xe9\x46\xda\x47\xdf\x96\x77\x46\x3a\x2b\x5c\xa3\xf8\xed\x4d\x84\xd1\x4f\xcc\x84\x45\x18\x88\x1c\xfd\xc1\x2a\xfb\x89\x69\xf0\x5f\xc2\xf8\x6c\xc8\x94\x90\x08\x3a\x28\x31\x19\x91\x37\xfa\xde\xf0\xf2\x85\x31\x11\x18\x13\xc7\x61\xb0\xec\x23\xcd\x67\xd8\xd1\x47\x0e\x56\x57\x42\x4d\xf0\x1b\x1e\x21\xad\xad\x36\x5f\x72\x4d\x74\x54\x97\x5f\xc7\x9c\xd1\xee\x44\x20\xa0\x26\xe4\x2f\x3c\xb8\x4e\x3a\xb6\x09\xd5\x3d\xe0\x17\x3b\xe7\xfa\x93\xf4\x97\x51\xed\x89\xd2\xe8\x96\x02\xfa\xf0\x37\x53\xa9\x4d\xea\x8f\xa0\xcb\x0d\xc0\x46\xd4\x58\xa6\xd3\xba\x00\x65\x39\xc6\x86\xe5\xda\xb0\xa9\x9e\x31\xab\x59\x69\x74\x09\x46\xce\x59\x5d\xc1\xba\xbf\x64\x73\xcd\xe5\x7d\xf9\xf6\x8f\xa2\x5b\xdb\xe3\x44\xce\x34\x1b\xae\xd2\xed\x7b\x1e\xed\x57\xc9\x35\xcc\xa2\x83\xc5\xa2\x75\x7a\x74\x3f\x71\x73\xc8\x09\x53\x9a\x2d\x16\x3d\x13\x0a\xc6\xfe\x41\x64\x90\x51\x3e\x6a\x0a\xdd\x01\x71\x25\x0c\x70\x78\x41\x5e\x48\xcc\xf4\x81\x15\x05\x54\x96\x17\xe5\x9d\x93\xba\x9b\x82\x2c\xc1\x1c\xb0\x84\x2d\x9d\xf4\x36\xf9\xff\xa7\xf5\xbd\x1b\x9f\xd6\xca\x25\xd3\x67\x90\x6b\x03\x2e\x53\x24\xf4\xc5\xb5\xb3\x4d\xfd\x55\x2c\x10\x3e\xa1\xa7\xe4\x84\x61\xa0\x7e\xbf\x80\x9c\xd7\xd2\xd2\xf0\xf6\xa9\x06\x23\x00\x0d\xa8\xdf\xc0\x68\xbf\x75\x03\xc8\x19\xcf\xa8\x0b\x3d\x53\x2b\x4e\xf9\x3c\xbc\x17\x76\xea\x85\x07\x4c\xc7\x61\x18\x1c\x1f\xb3\xb3\x5a\xc8\x8c\xa5\x3c\x9d\x02\xbb\x87\x39\x13\xea\x48\x0a\x05\xac\x9e\x48\x21\xe7\xec\x88\x15\xf3\xea\x93\x64\x0f\x15\x2b\xf1\x6f\x69\xf4\x58\x42\x51\x85\xc1\xb8\xce\x11\x4c\x65\x4d\xc1\xd5\x44\x02\x76\x9b\xb3\x3a\xcf\xc1\x44\x31\x85\x6b\x8b\x52\xe8\xe4\xb8\xce\x93\xf7\x46\x58\x38\x9b\x5b\x88\x0e\xed\x21\xe6\x8a\x21\x79\xfb\xb6\x73\xda\x0e\x37\x97\x13\x5c\xc6\x7c\xdf\x0d\x58\x8a\x20\x0c\x57\x13\xd8\x22\xeb\x9a\xc2\x1b\xe2\x6d\x94\xee\x56\xb8\x29\x5a\x59\x93\x6a\xf5\x90\x5c\x5a\xcd\xa3\x35\xba\x27\xaf\x85\xca\xe2\x5e\x0c\xeb\x72\xe7\x5a\x7e\x5f\x18\xeb\x57\xc9\x6e\x18\xeb\x72\x5f\x03\x63\x5b\x67\x87\x84\x4f\xe8\x42\x0e\x9d\x0c\x19\xee\xfa\x8d\x38\x0c\x56\x24\x19\xd5\x0d\x49\xc6\x75\x1e\x53\xd9\xf5\x52\xd6\x95\xd6\x39\xd2\xf2\xaa\xb6\xc9\xdb\xff\xeb\xf4\x1e\x35\x11\x51\x07\x8e\xaf\x19\x1a\xfa\xfc\xf9\x0f\xf7\x30\xff\xb8\xb7\xa1\x5b\x25\x9d\xa9\x30\x78\xe0\x86\x6a\x94\x6e\xa7\x90\x38\xfd\xcc\x1b\xc6\x00\x34\x43\xab\x01\x8b\x40\xd6\x43\x7e\xd9\xf9\xc2\xca\x0c\x83\x60\x17\x82\x53\x29\x9b\x6b\xf4\x09\xa9\x9e\x1a\xde\x4f\x5a\xd7\xb6\x7b\x60\x95\x45\xfc\x8c\xc3\x20\xf0\xad\xf0\x64\xb8\x41\xde\xdb\xce\xd7\x77\x71\x61\x64\x44\xc1\xcd\xfc\x35\xcc\x3b\xc2\x18\xe8\xde\xdb\xe2\xf9\x73\x26\x41\xf9\xc2\x8b\xb1\x69\xfc\x87\xc2\xbe\x7f\xcf\xa8\x15\x3d\x59\xad\xf6\x7d\xa1\xbf\x83\x60\x93\xab\x65\x46\x77\xf7\x98\x2e\x43\x1f\x90\x94\x40\x32\x29\x2a\xea\x28\xd4\x52\x82\xe6\x8e\xc1\x70\x6d\xdc\x37\xce\x0f\xc4\xdc\x6c\x74\x51\xb7\x07\x87\xac\xe0\xf7\x10\xad\x3a\x29\x9e\xd8\x37\x62\x58\xed\xa8\xab\x9c\xb7\x46\x06\xbb\x4a\x60\xfb\x30\x39\x11\xb8\x1a\x4a\xb0\x8b\xcc\xd9\xd0\xf9\xec\xaa\xe0\x17\x5c\x1a\xe9\xca\x4e\x0c\x54\x51\x26\xb8\x04\xd4\x8f\xe1\xad\xba\x4f\xfb\x83\xbe\xc1\xcf\x80\x6d\x96\x57\x73\x43\x33\x18\x50\x96\x9d\xdd\x07\x2e\x6b\xb8\xe2\x65\x49\xce\x63\x7d\xad\x3a\xda\x99\x50\x99\xdf\xda\x15\x92\x77\xf3\x12\x76\xba\xdc\xaa\x6d\xac\x06\x4d\xdf\xee\xf4\xd9\xb5\x46\x4b\x01\xf1\x69\x33\x60\x63\x14\x6c\x32\x46\x70\x0d\xd8\x1f\x0d\x16\xed\xa2\xc1\x1e\xa8\xeb\x58\x09\xec\xd2\x0d\x37\x14\x46\xba\x9c\x21\xc7\x34\x25\x97\x2a\x13\x06\x52\x1b\x35\x0b\xbf\xa2\xc4\x9b\x3c\xd2\x48\x9a\x07\x2e\xd7\x66\x07\xda\xac\x5e\x1a\x5d\x34\x2e\x90\x42\x7f\xb3\xae\x25\x29\x76\x37\xa1\x43\x82\x23\xa0\x50\x16\x4c\xce\x53\x58\xb8\xb9\x88\x28\xbf\x11\xac\x4e\x20\x9b\x83\x2b\xe3\x23\x6b\x76\x9b\xee\xe8\x68\xc6\xb8\xde\x41\xb8\x1d\xcb\xfc\xb0\x79\x01\xe3\x7a\x72\xa5\x33\x37\x48\xe4\x85\x4d\x5e\x96\x46\x28\x2b\x55\xd4\x95\xa0\x96\x65\x1a\x63\x54\x04\xf1\x3e\xf2\x18\xc0\xd8\x0f\x66\x34\xae\x6c\x98\xbf\xac\x48\x3c\x4a\xed\x23\x3d\xaf\x82\x19\x1d\xa4\x11\x69\x4b\x1d\x3a\x4f\x92\x9b\x96\x67\x7b\xa0\x9b\xf5\x21\x6a\xde\x44\x7b\xe4\xe3\xc9\x78\x06\x8e\xe3\x38\xa1\x26\x74\x1d\xbc\xd5\xb3\xa8\x83\xc6\x99\x4d\x92\x24\x4e\x6e\x52\x4e\x35\x83\xc9\xc5\x05\x52\xbd\x0a\x4d\x9f\x26\x6f\x2a\xa2\x79\xf8\x4b\xb4\x7a\xf7\xda\x1a\x19\x0e\x59\xf5\x49\x26\x2f\x8c\xb9\xd6\x6f\xf5\xcc\x4d\x24\xde\x22\x16\xcf\xf1\x31\x6b\xee\x31\x7a\xf2\xa9\x43\xeb\x09\xcc\xb8\x9a\xdb\x29\xbe\x0d\x67\x53\x50\xcc\x4e\xc1\xc0\x61\x85\xef\x0b\x77\x77\xf9\x0a\x5b\x8d\xa4\x4f\x87\xeb\xae\xb9\x15\xc8\x4f\x7c\x56\xf5\x47\x6b\x33\x38\xdb\xe7\x3e\x1f\x9b\xf5\x50\xac\xde\x24\xbd\x6f\x08\xec\x8d\xf8\x7e\xc6\xc7\xb3\xbb\xc2\xbf\xba\x43\x36\xef\xa9\x8d\xf9\x67\xbf\x81\xaa\x19\xdc\xf6\x10\xa7\x41\x8d\x0d\x9d\xf3\x7b\x1b\x68\x07\xb6\x60\x8f\x57\x5c\xfb\x3f\xd6\x4c\x9f\xe6\x16\xcc\x37\xbd\xe0\xfc\x1b\xad\x4d\xaa\x57\xae\x84\xec\xbe\xde\x96\xe1\x9f\x01\x00\x00\xff\xff\x89\xa1\x69\xb9\xc8\x17\x00\x00")

func models17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_models17_upsertGoTpl,
		"models/17_upsert.go.tpl",
	)
}

func models17_upsertGoTpl() (*asset, error) {
	bytes, err := models17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0x31, 0x46, 0xdb, 0x12, 0x3, 0x67, 0xd2, 0x74, 0x75, 0xb6, 0xa6, 0x92, 0x18, 0xff, 0xd1, 0x27, 0x67, 0xf8, 0xf, 0xe9, 0x55, 0x49, 0xa, 0xf5, 0x28, 0xc, 0xe6, 0xc1, 0xf7, 0x35, 0x26}}
	return a, nil
}

var _modelsSingletonPsql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6b\xe3\x38\x14\x7d\x96\x7e\xc5\xad\xa0\xd4\x06\xe1\x6e\x5f\x17\xf2\xd0\xc6\x6e\x37\x4b\xb0\x9b\xd8\xde\x1d\x18\xe6\x41\xb6\xaf\x53\x81\x63\x67\xf4\xd1\x99\x32\xcd\x7f\x1f\xe4\xd8\x75\xda\x74\x28\x85\xa0\x04\xdd\x7b\x8e\xce\x3d\x3a\xca\xe5\x25\x14\x56\x36\x55\xbe\xd3\xa8\xcc\xca\xa2\x7a\xba\xef\xb4\xd9\x28\xd4\x87\x82\x06\x01\xe9\x6a\x09\xda\x08\x83\x5b\x6c\x0d\x68\xa3\x64\xbb\x01\xab\xdd\x6a\x1e\x10\x6c\x8f\x0d\x85\x11\xb0\x53\xdd\xa3\xac\xb0\x0a\x68\x6d\xdb\xf2\x8f\xd4\x5e\x25\x05\x54\xc2\x88\x42\x68\x0c\x42\x29\x1a\x2c\x0d\x07\x23\x8a\x06\x63\xb1\xc5\xe1\x0c\x0e\x76\x57\x09\x83\x49\x3b\xef\xda\xba\x91\xa5\x81\xa2\xeb\x1a\x0e\x0a\xcd\x58\xe3\x50\x0e\x35\x0e\x3f\x1e\xa4\xc1\x46\x6a\x03\x5f\xbf\x1d\x18\xfc\x51\xed\x2f\x4a\xc6\x3e\x98\xb9\xcd\xad\x68\x37\x0d\x06\x8b\x0a\x5b\xb3\xb2\x9d\xc1\xb4\x91\x25\x3a\x61\xc1\x72\xc5\xc1\x7d\xaf\x57\x13\xb9\x4f\xc9\xc4\xfe\x19\x82\x17\x94\x4f\x89\xc2\xcf\x61\x15\x1a\x9f\x52\x52\xd8\x1a\xfe\x3e\xc6\xdd\xa1\xb9\xb1\x75\x8d\xca\xf3\x29\xa9\xb0\x46\x75\x54\xbc\xb7\x63\xb1\xb0\xb5\x83\x97\x5d\x63\xb7\xad\x76\x14\x2c\x8c\x6e\xaf\xf3\x65\x06\xff\x5d\x2f\xf3\x28\x65\x94\xc8\x1a\x1a\x6c\xbd\x49\x25\x9c\xcd\xe0\x2f\x67\xd7\x0b\x6e\x06\xf5\xd6\x04\xe9\x4e\xc9\xd6\xd4\x1e\xf3\xce\xb5\x3f\xe0\xc1\xfd\x66\x9c\x12\x42\x0e\x36\xeb\xe0\xdf\x4e\x1e\xb1\x71\x60\x1c\x98\x3f\x76\x8c\x0a\x1b\x51\xe2\x43\xd7\x54\xa8\xfa\x24\x04\xb9\xc6\x45\x5b\xe1\xcf\xe3\x02\x7f\xa3\x8b\xc3\x15\x87\x2b\xdf\xa7\x64\x4f\x29\x71\x8a\x6e\x07\x45\x94\x38\x87\xdc\x19\x6c\x11\xa7\xd1\x3a\x83\x45\x9c\x25\x70\xae\xdd\x27\x89\x61\x9e\xc4\xb7\xcb\xc5\x3c\x83\x5e\xe9\x4b\xc6\xf8\x34\x22\xa7\xc4\x19\x25\x6b\x38\x3b\x09\xdc\xf3\x73\x2f\xe4\xb0\xef\xc3\x6c\x74\xa7\xb0\x75\xf0\xbf\x92\x06\xd3\x7e\x72\x8f\x85\x09\xc4\x49\xf6\xcf\x22\xbe\x63\x4e\x24\x60\xa3\xf1\x75\xe7\xcd\x93\x41\xef\xc2\xbb\xf0\xdf\x81\xbf\xf2\x6f\x4a\x74\x6f\xdf\x7b\xfd\xcc\x87\x30\x81\xfc\x3e\xbc\xce\x22\x48\xa3\x0c\x98\x9b\x80\xd4\x9d\x02\xc9\xe1\xd1\x5d\xb6\x12\xed\x06\x87\x57\xd2\x0b\x71\x03\xca\xe9\x7e\x4f\x94\xf1\x5e\x19\xd9\xbb\xe5\xbb\x4b\x65\xf5\x3a\x76\x53\x5c\x4f\x92\xfa\xd8\x23\xdf\x8a\x3c\x90\xbc\x5b\x62\x30\x83\xe8\xcb\x7c\x99\x87\x51\x18\xb0\x0f\xd0\xfb\xc3\xa5\x0f\x59\x75\xaf\x62\x9a\xe2\x94\x78\x1d\x65\xf9\x3a\x5e\xc4\x77\xc0\x3e\x74\xba\xff\x23\x19\x4d\x76\x67\x28\x34\x56\xb5\xe0\x40\x43\xbf\x4f\xf7\xf4\x77\x00\x00\x00\xff\xff\x27\xb5\xbb\xe1\x26\x05\x00\x00")

func modelsSingletonPsql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_modelsSingletonPsql_upsertGoTpl,
		"models/singleton/psql_upsert.go.tpl",
	)
}

func modelsSingletonPsql_upsertGoTpl() (*asset, error) {
	bytes, err := modelsSingletonPsql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models/singleton/psql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0xa6, 0xcb, 0x14, 0x76, 0x68, 0x35, 0x8d, 0x58, 0x84, 0xeb, 0xe0, 0x75, 0xa3, 0xf4, 0x48, 0x62, 0x9f, 0xd7, 0x35, 0x22, 0x11, 0xbd, 0x96, 0xfa, 0x80, 0x27, 0xf8, 0xc8, 0x22, 0x24, 0x22}}
	return a, nil
}

var _models_testSingletonPsql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6f\xe3\xb8\x11\xfe\x2c\xfd\x8a\x39\x03\x39\x48\x5b\x87\x3e\xf4\xe5\x4b\x0e\xc6\x21\x71\x9c\x74\x71\xd9\x24\x6b\xbb\x3d\x14\xdd\xf6\x8e\x96\x46\x0e\x11\x89\x64\x48\x2a\x59\xf7\x90\xff\x5e\x0c\x29\xd9\xb2\x63\x25\xdb\x6e\x0b\xdc\xa7\x84\xe4\x33\xef\x0f\x87\x23\x3f\x72\x03\x66\xf5\xf9\xf6\xf2\xe2\x1e\xd7\x30\x06\x83\x2b\xfc\xac\xd9\x87\xda\xba\x89\xaa\xb4\x28\x31\xf9\x25\xf9\xa1\x4a\xff\x79\x7a\xb5\x98\xce\x60\x71\x7a\x76\x35\x05\xf6\xee\x93\xfc\x64\x7f\x77\x7a\x7e\x0e\x93\x9b\xeb\xf9\x62\x76\xfa\xfe\x7a\x01\xec\xdd\x0f\x70\x71\x33\x9b\xbe\xbf\xbc\x86\x1f\xa7\x7f\xa3\xf5\xf7\x9f\xe4\x2f\x69\x1c\xbb\xb5\x46\xd0\xab\x05\x5a\x87\x06\xac\x33\x75\xe6\xe0\xd7\x38\xca\x97\x13\x25\x25\xbc\xb3\x0f\x25\x3b\x3f\x8b\x69\xe3\x9a\x57\x08\x04\x11\x72\x15\x47\x77\xca\x3a\x80\xed\xba\xb6\x68\xba\x6b\xcd\xad\xed\xae\xad\x2d\x2b\x95\xe3\xf6\x5c\x19\x2f\x2f\xa4\x8b\xe3\x48\xaf\x6e\xb9\xb5\x17\xa2\xdc\x00\xe2\xc8\xa1\x75\xe7\x67\xde\xea\x46\xc9\xbd\xd0\xf3\x8f\x57\x93\x2a\x87\xa5\x52\x65\xfc\x1c\xc7\x45\x2d\x33\x10\x52\xb8\x24\x0d\x7e\x7f\xe0\x42\xc2\x18\xbe\x6d\x83\xfa\xf5\x99\x60\xa3\x11\x58\x74\xb5\x86\xbc\xae\xb4\x05\x77\x87\x90\x73\xc7\x97\xdc\x22\xd8\xec\x0e\x2b\x0e\x5c\xe6\x20\x2a\xf2\xcb\x82\x70\xe4\x98\x02\x0e\x0e\x69\x8b\x9b\x35\x18\x2e\x73\x55\x95\x6b\xd2\xb5\x42\x89\x86\x3b\xcc\x81\xbc\xec\xa8\x52\xe0\xee\xb8\xf3\xbb\x16\x32\x2e\x61\x89\x60\x6a\x09\x7c\xc5\x85\xb4\x8e\x14\xd7\x56\xc8\x15\x79\xb0\xab\xc8\x3e\x94\x4b\x25\x4a\x34\x70\x33\xfb\x00\x9a\x67\xf7\x7c\x85\x2c\xc4\x97\x68\x78\xd7\xc6\x93\x86\x40\x92\x14\xd0\x18\x65\x28\x68\x62\x0a\x1a\x13\x36\xe2\x38\x7a\x14\x1a\x0d\x9b\xa3\x3b\xc7\x82\xd7\xa5\x4b\x06\x9a\xea\x18\xe2\x1c\x0c\x61\xa0\xeb\x65\x29\xb2\x41\xda\x0b\xa5\x2c\x0c\x86\xf0\xa7\x3f\xfe\xe1\xf7\xfd\xa0\xa6\xa4\xa4\xd0\xe0\x43\x2d\x0c\x0e\x52\xaa\x25\x6b\xb8\x32\x86\x20\x78\x89\x6e\xee\x0b\xd8\xc8\xe5\x4b\xc9\x2b\xc2\x46\x9a\x79\x1a\xf5\x01\xe9\x30\xc0\x3c\xbb\xfa\x60\x74\x18\x60\x9e\x74\x7d\x30\x3a\x6c\x60\xc4\xbd\x0e\xec\xbd\xdc\x89\xdb\x63\x5a\xbe\xf6\x69\x6b\x83\xf7\xe0\x0e\x55\xfb\xf0\x04\xe9\x06\xde\xa1\x72\x47\xe4\x4c\xa9\xb2\x35\x70\x2f\xe8\x6f\x56\xe5\x3e\xab\x54\xdf\x31\x3c\xf2\x92\xb3\x33\x5c\x09\xf9\x57\x5e\x8a\x9c\x3b\xa1\x64\x92\xb2\x66\x81\x49\x1c\x45\x1e\x12\x4c\x5f\x2b\x37\xad\xb4\x5b\x27\x21\x81\x54\xf8\x6d\xbe\x86\xbd\x58\x4a\x7b\x8b\x0d\x25\xd8\x60\xaf\x95\x4b\xfc\x3f\xd3\x87\x9a\x97\x36\x09\xb9\x1c\xc2\x77\x2d\x3e\x24\xf0\x15\xe5\x81\x1b\x2d\xbc\xcd\x48\x3f\xbe\xc9\x73\x2b\xb0\x49\xfb\x30\x8e\x52\x36\xb9\xc3\xec\x3e\xa1\xf4\x88\xc2\xdf\x80\x6f\xc6\x20\x45\x49\x77\x22\x32\xe8\x6a\x23\x69\x37\x8e\x9e\xe3\x38\x1a\x8d\x40\x14\x20\x95\xbf\x9b\x74\x03\xcf\xcf\x80\x28\x81\xb9\x97\x2e\x51\x26\xdd\x42\xa6\x30\x1e\xc3\x77\x5e\xd3\x68\x04\x13\x83\xdc\x21\xf0\xa6\x09\x88\x7f\x61\x0e\xf9\x12\xc8\x79\x16\x47\xfb\x0c\xd8\x80\xd8\xdc\xf1\x65\x89\xe1\x60\x13\x7c\x1a\x1c\x6a\x5c\x1e\x83\x66\x15\xbf\xc7\xdb\xcb\xb6\x05\x26\xe9\xf7\x6f\x05\x23\x0a\xf8\x66\x87\x43\x04\xea\x28\xcc\x8d\xd2\x0b\xef\xd2\x01\x65\x3b\xda\xa2\xe7\x5d\xc9\xcc\x47\xfa\xc5\xb2\x71\x14\x51\x47\x25\x17\x4e\xc6\x80\x9f\x31\x63\x13\x55\x55\x5c\xe6\xc9\x40\xaf\x7e\xa6\x33\xea\x0f\xc7\xc7\xa1\xf9\x1c\x2b\x59\xae\x07\x43\xe8\xa4\xa2\x95\x67\x53\xf9\x08\x63\xe0\x5a\xa3\xcc\x13\x65\x69\x2d\x0c\xd1\x9b\xe0\x7a\x35\x95\x8f\x49\xca\x18\x23\x91\xe0\xe4\x61\xa3\xf6\xa1\xf4\x06\x3a\xa5\xec\x4a\x7c\xb9\x19\x4a\xfb\x10\x9e\xc8\x84\x50\xec\x56\x68\x4c\x3a\xee\xce\x5d\x4e\xa9\x39\x19\xc3\xb7\xcb\xb5\x43\xcb\xce\xea\xa2\xf0\xaf\x4d\xc7\x58\x3f\xa8\x13\xf7\xdc\xe5\xaa\xa6\x7e\xf4\xb4\xbb\x19\x2a\xb2\x63\x2e\xde\x89\x64\xee\x72\xff\xd4\x49\x7c\xba\xf8\x11\xd7\xe7\x68\x9d\x51\x6b\x34\xc9\x66\x6a\x18\x82\x49\xf7\x45\x82\xda\x3d\x17\xe3\x2e\x09\xb6\x3e\x70\xe3\x5e\xe7\x80\x32\x96\xfd\x64\xb8\x4e\xd0\x50\x7b\x29\xb8\x28\xe9\x4d\x54\x60\x49\x16\x1a\x06\x40\x16\xaa\x43\x9d\x6f\x97\x6f\x5d\xcf\xbe\xda\x98\x7d\x28\xf7\x2c\x1d\x8a\xea\x27\x2e\x0e\xda\x29\x2a\xc7\x6e\x8d\x90\xae\x94\x64\x20\xdd\xdf\xdb\x29\x44\xd3\xa7\x92\x34\xfd\x42\x17\x9f\xb8\x70\x50\x28\xd3\x93\x92\x38\x8a\x7e\x26\x06\xb0\x49\xa9\x2c\x26\x29\x8c\x46\x70\x5a\xd0\x48\xd6\xde\x2e\x61\x21\x57\x12\x87\x90\x11\xc2\x0f\x30\x4f\x46\x38\x04\x94\x39\xa8\xc2\x6f\x68\xa1\x31\x3e\x9c\xde\xff\x36\xea\x3d\x9e\x7c\x45\xdc\x2f\xab\xe3\xe3\x6e\x74\x48\xb1\x9d\xe6\x76\xa7\x1d\x53\xcb\x49\x95\x27\x96\xc8\x3e\x6c\x35\x34\x13\xe1\x10\xb8\x59\x59\x60\x8c\x85\x75\x67\x26\xca\x0e\x34\x87\x46\x38\x48\x85\x56\x92\xfd\x67\x1d\xa1\x79\x28\xbc\x33\x29\x25\x32\xbc\x10\x59\xe7\x36\x06\x4f\x2c\xbb\xc6\xa7\x19\xf2\x1c\x4d\x83\x0e\xe1\xda\x70\xd9\x0f\xb5\x0d\xdb\xdf\x51\xb2\x6e\x9b\x08\x2a\x36\x9b\xa1\xd2\x41\x78\xf3\xa8\x9c\x8c\x81\x8e\x67\xb5\x3c\x50\xf4\x6e\x7d\xdb\x52\x99\x5a\x4a\x21\x57\x27\x83\x4d\x8a\x43\x96\xd2\x3d\x7c\x30\xbe\x43\x83\xbd\xe3\x7d\x96\xec\x3f\x5d\x6f\x16\xbc\xc9\x38\xfc\xfd\x1f\x21\x95\xe4\x73\x23\xd4\x6e\xb5\x51\xcc\x35\xd9\x2d\x92\xc1\xed\xe5\x9f\x6f\xe6\x8b\xf1\x91\xf5\xad\x9f\x86\x16\x3f\x52\xec\x61\x6e\x6f\x66\x8b\xf1\x51\xee\x31\x34\xa8\x1c\xc2\xfc\x65\x3e\x9d\xb5\x7a\x68\x50\x3a\xa8\xe7\x74\x3e\xbf\x78\x7f\x35\x6d\x71\xdb\xaf\x17\x42\x3f\xf7\xc4\xb5\xff\xc8\x6f\xb9\xea\x2a\x3d\x6c\xcb\x26\x54\xed\x44\xc9\x16\x58\x69\x0f\x1b\xf8\x79\x7d\xd5\x0e\xaf\xaf\xcd\x39\xbd\x97\x30\x5c\x62\x50\x9a\xc6\x45\x28\x44\xe9\x67\x50\x2a\x06\x05\x76\xd1\x04\xe6\xbd\x18\x1c\xd9\x93\xa3\xfc\x44\x2b\xeb\x56\x06\xed\x49\x27\xa3\x6d\xd6\x36\x99\xe9\xcc\x4d\xe4\x5e\xe7\x3e\xbc\x54\xdb\x2a\xf2\x40\xb2\xdd\xc1\x94\x92\x40\xe9\x2b\xee\x1c\xf5\x3a\xd2\x8e\x93\xbf\x21\x97\xb6\x83\xc7\xff\xd1\xad\x2e\xe9\x60\x0c\xae\xd2\xcc\xcf\x98\xe9\xe6\xae\xd0\x56\xf3\x9a\xf4\x10\x72\x77\xd4\xdb\xd2\xb1\x51\xa0\x59\xd3\x7a\x3d\x05\x03\x38\x5f\xbe\x98\xad\x0e\xeb\xee\x0e\xa0\x6f\x68\x26\xa8\xd7\x3b\x38\x3e\x16\xc5\x31\x7e\x16\xd6\xd9\x43\x66\x46\x23\x70\xc8\x4d\xae\x9e\xa4\xef\xeb\xb5\x43\x0b\x59\x89\x5c\xd6\x1a\x1c\xb7\xf7\x16\x9e\xee\x50\xfa\xa7\x30\x7c\x80\x17\x42\x0a\x7b\xd7\x36\xb7\x43\x7e\xb6\x0a\xfb\x3f\xa7\x77\xc6\x6a\xff\xab\x48\x9b\xd6\x37\xa6\xf4\xa8\xc5\x83\x47\xfc\xcf\xa7\xf6\x4e\x33\x55\x96\xcd\xb0\x52\x8f\xf4\x8d\xd1\x69\x46\x7d\x75\x57\x92\xe2\x4d\x9a\x1f\x77\x86\x21\x50\xff\xf3\x89\x28\x36\x51\x1e\x08\xac\x3d\x1a\xfa\x78\xbc\x03\x7b\xb9\xda\x22\x9a\x67\xe9\xa1\x64\x37\x1a\x65\x32\x68\x3b\xca\x60\x08\xb9\x11\x8f\x68\xd8\xed\xfc\xe3\xd5\x59\x2d\xca\xfc\x63\x8d\x66\xdd\x3c\x19\xed\x97\x6a\xe0\xff\xcb\xeb\xb4\x7f\xd9\x9a\xef\xc1\xf4\xb5\xd6\x28\x45\x39\x7c\xf1\xfe\xec\xc6\xf2\x1c\xff\x3b\x00\x00\xff\xff\xa1\x67\x61\x83\x6e\x13\x00\x00")

func models_testSingletonPsql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_models_testSingletonPsql_main_testGoTpl,
		"models_test/singleton/psql_main_test.go.tpl",
	)
}

func models_testSingletonPsql_main_testGoTpl() (*asset, error) {
	bytes, err := models_testSingletonPsql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models_test/singleton/psql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd4, 0x99, 0x16, 0x85, 0x72, 0x61, 0x66, 0xa7, 0x45, 0xbb, 0x44, 0xea, 0xe5, 0xf, 0x43, 0xb6, 0xe3, 0x86, 0x70, 0xcd, 0x74, 0x56, 0x24, 0x39, 0x7b, 0xdb, 0x45, 0xd3, 0x93, 0xdd, 0x42, 0xd1}}
	return a, nil
}

var _models_testSingletonPsql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\xca\xc2\x30\x10\x85\xf7\x3d\xc5\x50\xb2\x68\x7f\xda\x1c\xe0\x07\x17\x82\x1b\x5d\x88\x48\x7b\x80\xd1\x4e\x4b\x20\xc6\xd2\x99\x82\x10\x72\x77\x49\x53\xa5\x0b\x97\x1f\x6f\xde\x97\x97\x7e\x76\x77\x68\x88\xa5\x1d\x99\x26\x29\x04\xfe\x84\x58\x8c\x1b\x74\x53\x82\xcf\x00\xbc\xaf\x61\x42\x37\x10\x28\xe3\x3a\x7a\x55\xa0\x04\x6f\x96\xe0\x7f\x07\xfa\x80\x82\xba\x89\xc8\x21\xac\xc7\xa6\x5f\x2f\xf4\x91\x4f\x4f\xe3\x96\x18\xea\x6f\x4e\x96\xb7\xa8\xd0\x1a\xe4\x68\x53\x49\xb7\x8f\x4c\x9c\xb4\x1f\xd5\x19\x1f\xb4\x54\x44\x5f\x67\x57\xe4\xde\xa7\x9e\x6e\xc7\x8b\x9d\x27\xb4\x21\xe4\x15\xc4\xe9\x3f\x92\xf4\xb7\x72\x79\x90\x5c\xb7\xdd\xb2\x52\xc8\xde\x01\x00\x00\xff\xff\xc2\xf2\x93\x84\x09\x01\x00\x00")

func models_testSingletonPsql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_models_testSingletonPsql_suites_testGoTpl,
		"models_test/singleton/psql_suites_test.go.tpl",
	)
}

func models_testSingletonPsql_suites_testGoTpl() (*asset, error) {
	bytes, err := models_testSingletonPsql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models_test/singleton/psql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x14, 0x5a, 0x2f, 0x93, 0x2a, 0x92, 0xeb, 0xe5, 0xb3, 0x40, 0x5f, 0x7e, 0xf9, 0x76, 0xa9, 0xbf, 0x7a, 0xd0, 0x2b, 0xb9, 0xa2, 0x2e, 0x4, 0x84, 0x63, 0x44, 0x9f, 0x2d, 0xd6, 0xa9, 0xc8}}
	return a, nil
}

var _models_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4f\x8b\xdb\x3e\x10\x3d\x5b\x9f\x62\x7e\xe1\xd7\x22\x17\xaf\x96\x5e\xb7\xe4\x90\xfd\x73\x58\x4a\x43\xd8\x38\xe7\xa2\xb5\xc7\x59\x11\x59\x32\xd2\xb8\x49\x6a\xf4\xdd\x8b\x6c\xef\xff\x6c\x09\xa5\x85\xf6\x90\xd8\x12\x6f\xde\x9b\x79\x33\xe3\xae\x3b\x81\xff\xa5\x56\xd2\xc3\xd9\x14\xc4\x2c\xbe\xa1\x17\xb9\xbc\xd5\x08\xc3\x43\xcc\x65\x8d\x21\xb0\xaa\x35\x05\x10\x7a\xea\xba\x21\x42\xac\x9a\x85\x6e\x9d\xd4\x21\xac\x1a\x8f\x8e\x38\xc1\x87\x08\x50\x66\x2d\xf2\x14\x3a\x96\x90\x58\x48\x27\xb5\x46\xcd\x53\xc6\x12\x55\x81\x46\xc3\x1f\x08\x2e\xed\xd6\x2c\x95\x59\xb7\x5a\xba\x10\x66\x5a\x5f\x58\xdd\xd6\xc6\xa7\x30\x9d\xfe\x0c\xb9\x70\xaa\x96\x6e\xff\x19\xf7\x0f\x01\x1d\x4b\x12\x12\xcb\x8d\x6a\xf8\x24\xfe\x37\xca\xac\x81\xfa\x32\xb6\x8a\xee\xc0\x1a\xbd\x87\x66\x88\x83\x0d\xee\xa1\x18\x22\x27\x29\x4b\x02\x63\x89\x47\x2c\xa3\x05\x4e\x9a\xd2\xd6\xea\x3b\x8a\x39\x6e\x97\x88\x25\x4f\x59\xf2\x4d\x3a\x40\xd7\xff\xac\x63\xc9\xe9\x29\xcc\x88\xb0\x6e\x08\xe8\x0e\xe1\x7a\xbe\xbc\xba\xc9\xc1\xab\x12\xc1\x56\x20\x0d\xac\x16\xf1\x86\x25\x36\x32\x3e\xb1\xeb\xb1\x82\x2e\xf4\x6e\x44\xd2\xa7\x9a\x4b\x72\x6d\x41\x3c\x26\x93\xc1\x7b\x9b\xc1\x1b\x06\x5c\x9e\xe7\xfb\x06\x7d\x06\xe4\x5a\x4c\x3f\xf5\x3c\xff\x4d\xc1\x28\x3d\x1a\x71\x15\x33\xad\xf8\x64\x65\x7a\x0b\xc8\x3e\x8a\x1c\x4e\x08\x7c\x2f\x7d\x06\xef\xfc\x24\x8b\x7c\xa3\x2f\x5d\xa7\x2a\x30\x96\x40\xcc\xed\x85\x35\x84\x3b\x0a\xa1\xa0\x5d\xac\xac\x18\xce\xe2\x5c\x16\x9b\xb5\xb3\xad\x29\x79\xda\x75\x68\xca\x10\x58\x32\x40\xbe\xb4\x9e\xf2\x1d\xef\x59\x9e\x32\xbc\xba\xf0\xaa\xae\xd1\x89\x73\x5c\x2b\xd3\xb3\x68\x8f\xcf\x6f\xf3\x1d\x2f\x68\x97\xc5\x22\xef\x55\x8e\x84\xa5\x2c\x29\xb1\x42\x07\x71\x84\x79\x0a\x1d\x7c\x85\x29\xd0\x4e\xdc\x58\xad\x6f\x65\xb1\xe1\x29\x84\xd8\xe7\x87\x8e\x58\x31\x4e\xf4\x5b\xe5\xc7\xce\xa0\x29\xe1\x24\x04\x88\xa7\x4a\x6a\x8f\xbd\x68\x06\x63\x36\xd7\xa6\x42\xc7\xd3\x97\xe7\xe3\xba\xd5\xf6\xf2\x87\x5b\xf5\xaa\x47\x85\x6d\x0d\xf5\x17\x2f\xe6\xed\x7e\x3d\x79\x2a\x2e\x22\xe6\xc8\x72\x1e\x9d\x78\x9d\x25\xbf\x97\x8d\x90\x5e\x38\x82\x3e\x3e\x83\x4c\xb6\xd2\x10\x58\x83\xe0\xb0\xb0\xae\xcc\x60\x6d\xe9\x6c\x92\x0d\xf8\x31\xe9\x17\x4b\xb4\x5a\x5c\xce\xf2\xab\x43\x4b\xf4\x3b\xd6\x64\x6c\xcf\xb1\x9f\x13\x21\xc4\x1f\x5d\xaa\x5f\x9f\xb3\xb8\xef\x7f\xc1\x98\xfd\x23\x53\x16\xd8\x8f\x00\x00\x00\xff\xff\xc6\x87\xe5\x58\xe0\x06\x00\x00")

func models_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_models_testUpsertGoTpl,
		"models_test/upsert.go.tpl",
	)
}

func models_testUpsertGoTpl() (*asset, error) {
	bytes, err := models_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0x79, 0xbf, 0xa1, 0x6, 0xda, 0x1a, 0x2e, 0xa6, 0xc, 0xfc, 0x72, 0xe4, 0x45, 0x98, 0xe7, 0xb1, 0x51, 0x57, 0xac, 0x91, 0x92, 0x8f, 0x51, 0x63, 0xf2, 0x2b, 0x56, 0xa9, 0x8e, 0x30, 0x5e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"models/17_upsert.go.tpl":                       models17_upsertGoTpl,
	"models/singleton/psql_upsert.go.tpl":           modelsSingletonPsql_upsertGoTpl,
	"models_test/singleton/psql_main_test.go.tpl":   models_testSingletonPsql_main_testGoTpl,
	"models_test/singleton/psql_suites_test.go.tpl": models_testSingletonPsql_suites_testGoTpl,
	"models_test/upsert.go.tpl":                     models_testUpsertGoTpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"models": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{models17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"psql_upsert.go.tpl": &bintree{modelsSingletonPsql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"models_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"psql_main_test.go.tpl":   &bintree{models_testSingletonPsql_main_testGoTpl, map[string]*bintree{}},
			"psql_suites_test.go.tpl": &bintree{models_testSingletonPsql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{models_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
