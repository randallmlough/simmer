// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/models/17_upsert.go.tpl (6.046kB)
// override/models/singleton/psql_upsert.go.tpl (1.318kB)
// override/models_test/singleton/psql_main_test.go.tpl (4.974kB)
// override/models_test/singleton/psql_suites_test.go.tpl (265B)
// override/models_test/upsert.go.tpl (1.883kB)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _models17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\xdd\x6e\xdb\x3a\x12\xbe\x96\x9e\x82\x0d\x16\x8d\xb4\x70\x94\xbd\xce\xc2\x17\xf9\x69\xbb\x41\x37\xa9\xb7\x69\xb6\xc0\x16\x45\x40\x4b\x23\x9b\x08\x45\xaa\x14\x15\xc7\xeb\xf5\xbb\x2f\x66\x48\xc9\xb2\x2d\x27\x6e\x4e\x7b\x4e\x71\xae\x62\x91\xc3\x99\x6f\x66\xbe\xe1\x0c\xb3\x58\x1c\xb1\xbf\x64\xdc\x72\x76\x32\x64\xc9\x05\xfe\x38\x5a\x2e\x43\x5a\x2e\x74\x06\x92\xd6\xaf\xe8\x57\xbb\xa1\x4b\x2b\xb4\xaa\x68\xeb\x83\xff\xdd\x6e\x72\x29\x38\x6d\x91\xda\xe4\x14\x3f\xa1\x4a\x3e\xf1\xb1\x04\xaf\xd3\x7d\x24\xd7\xbc\x80\xe6\x54\x95\x4e\xa1\xe0\x4e\x08\xcf\x6e\xca\xb1\xff\x79\x7d\x37\x2b\x41\x3a\x2b\xf2\x16\x4f\x72\x9a\x65\xef\xa4\x1e\x73\x07\xf5\xf8\x98\xdd\x96\x15\x18\xfb\x8e\x71\x6b\xa1\x28\x6d\xc5\xb8\x62\x42\xe1\xda\x80\x71\x95\xb1\x4c\x03\xad\xd5\x65\xc6\x2d\x30\x6d\x98\x98\x28\x6d\x80\x69\xc5\x52\xad\x72\x29\x52\x9b\x84\x79\xad\x52\x16\x69\xf6\xd7\xc5\xc2\x79\x97\xdc\x96\x37\x42\x4d\x6a\xc9\xcd\x72\x19\x37\x56\x22\x02\xa3\xb4\xf5\x48\xaf\xf5\xb9\x56\x16\x1e\xed\x72\x99\xda\x47\xd4\x87\x1f\x89\x5f\x1c\xb0\xc5\x02\x54\x86\x48\xbd\xf9\x0f\xea\xdc\x9b\x64\x63\xad\xe5\xa0\x45\x70\xae\x65\x5d\xa8\x8a\x7d\xf9\x5a\x59\x23\xd4\x64\xe0\x0f\xf8\xf5\x81\x77\xa9\x11\xab\x44\x51\x80\x49\xfc\x67\xcc\xc0\x18\x6d\xd8\x22\x0c\x0c\xd8\xda\x28\xa6\x13\x07\xd8\xe1\xdd\xc2\xea\x8f\xbf\x03\x7b\x71\x16\xc5\x8b\x05\xc8\x0a\xc8\x83\x01\x5b\x6d\x79\x69\x2f\xa1\xb2\xe5\x72\xb0\xe5\xc5\x96\x03\x4f\xe3\x8e\xc3\x65\x18\xb6\x31\x09\x5d\x6a\x31\x49\x3d\xe9\xed\x2e\x8d\xb8\x12\xe9\x46\xc2\x47\xbf\x2d\xe3\x8c\x74\x56\xb8\x46\xc1\xdb\x9b\x02\xa3\x5f\x95\x03\x8b\x30\x10\x39\x3a\x83\xc5\xf5\xab\x12\xe0\xef\x04\xf0\xd5\x90\x29\x21\x11\x71\x50\x62\x1a\x22\x6f\xf4\xb3\xe1\xe5\x1b\x63\x22\x30\x26\x8e\xc3\x60\xd9\x47\x97\x67\x78\xd1\x47\x0b\x56\x57\x42\x4d\xf0\x1b\x1e\x21\xad\xad\x36\xdf\x73\x35\x74\x54\x97\x2f\xe3\xcc\x68\x47\x16\x10\x4d\x13\xef\x37\x1e\x59\x27\x17\xdb\x54\xea\x1e\xf0\x8b\x9d\x73\xfd\x19\xfa\xdd\x48\xb6\xab\x22\xba\x15\x80\x0e\xfc\xc1\x24\x6a\xd3\xf9\x33\x88\x72\x03\xb0\x11\x32\x96\xe9\xb4\x2e\x40\x59\x8e\xac\x65\xb9\x36\x6c\xaa\x67\xcc\x6a\x56\x1a\x5d\x82\x91\x73\x56\x57\xb0\xee\x2f\xd9\x5c\x73\x79\x5f\xa6\xfd\x79\x88\xd6\x76\x34\x91\x33\xcd\x86\xab\x5c\xfb\x0e\x47\xfb\x55\x72\x0d\xb3\xe8\x60\xb1\x68\x2f\x85\xd1\xfd\xc4\x8d\x1c\x27\x4c\x69\xb6\x58\xf4\x0c\x23\x18\xf8\x07\x91\x41\x46\xc9\xa8\x29\x6e\x07\x44\x94\x30\xc0\x39\x05\x49\x21\x31\xcd\x07\x56\x14\x50\x59\x5e\x94\x77\x4e\xea\x6e\x0a\xb2\x04\x73\xc0\x12\xb6\x74\xd2\x1b\xb4\xff\x87\xd6\xf7\x6e\x4c\x5a\xab\x92\x4c\x9f\x41\xae\x0d\xb8\x1c\x91\xd0\xf7\x95\xcc\x36\xe3\x57\x51\x40\xe0\x84\x9b\xd2\x12\x86\x81\xfa\xef\x05\xe4\xbc\x96\x96\x26\xb4\x6f\x35\x18\x01\x55\x72\xad\xd5\x7f\xc0\x68\xbf\x75\x03\x48\x15\x4f\xa4\x0b\x3d\x53\x2b\x2a\xf9\x0c\x7c\x16\x76\xea\x85\x07\x4c\xc7\x61\x18\x1c\x1f\xb3\xb3\x5a\xc8\x8c\xa5\x3c\x9d\x02\xbb\x87\x39\x13\xea\x48\x0a\x05\xac\x9e\x48\x21\xe7\xec\x88\x15\xf3\xea\x9b\x64\x0f\x15\x2b\xf1\x6f\x69\xf4\x58\x42\x51\x85\xc1\xb8\xce\x11\x4c\x65\x4d\xc1\xd5\x44\x02\xb6\x97\xb3\x3a\xcf\xc1\x44\x31\xc5\x6a\x8b\x4c\xe8\xe4\xb8\xce\x93\xcf\x46\x58\x38\x9b\x5b\x88\x0e\xed\x21\x66\x89\x21\x6d\xfb\xb6\x73\xda\x0e\x37\x97\x13\x5c\xc6\x4c\xdf\x0d\x58\x8a\x20\x0c\x57\x13\xd8\xa2\xe9\x9a\xc2\x1b\x62\x6c\x94\xee\x56\xb8\x29\x5a\x59\x93\x6a\xf5\x90\x5c\x5a\xcd\xa3\x35\xa2\x27\xef\x85\xca\xe2\x5e\x0c\xeb\x72\xe7\x5a\xfe\x58\x18\xeb\x37\xc8\x6e\x18\xeb\x72\x2f\x81\xb1\xad\xb3\x43\xc2\x27\x74\x21\x87\x4e\x86\x0c\x77\xfd\x46\x1c\x06\x2b\x92\x8c\xea\x86\x24\xe3\x3a\x8f\xa9\xe0\x7a\x29\xeb\xea\xea\x1c\x69\x79\x55\xdb\xe4\xe3\x3f\x75\x7a\x8f\x9a\x88\xa8\x03\xc7\xd7\x0c\x0d\x3d\x7f\xfe\xcb\x3d\xcc\xbf\xee\x6d\xe8\x56\x49\x67\x2a\x0c\x1e\xb8\xa1\x1a\xa5\x7b\x29\x24\x4e\xbf\xf2\x86\x31\x00\xcd\x7c\x6a\xc0\x22\x90\xf5\x90\x5f\x76\xbe\xb0\x32\xc3\x20\xd8\x85\xe0\x54\xca\xe6\x02\x7d\x42\xaa\xa7\x86\xf7\x93\xd6\xb5\xed\x1e\x58\x65\x11\x3f\xe3\x30\x08\x7c\x07\x3c\x19\x6e\x90\xf7\xb6\xf3\xf5\x43\x5c\x18\x19\x51\x70\x33\x7f\x0f\xf3\x8e\x30\x06\xba\xf7\xb6\x78\xfd\x9a\x49\x50\xbe\xf0\x62\x6c\x17\x7f\xa3\xb0\xef\xdf\x2d\x6a\x45\xef\x52\xab\x7d\x47\xe8\xef\x1d\xd8\xde\x6a\x99\xd1\xc5\x3d\xa6\xcb\xd0\x07\x24\x25\x90\x4c\x8a\x8a\x7a\x09\x35\x93\xa0\xb9\x63\x30\x5c\x1b\xf7\x8d\xf3\x03\x31\x37\x1b\x5d\xd4\xed\xc1\x21\x2b\xf8\x3d\x44\xab\x1e\x8a\x27\xf6\x8d\x18\x56\x3b\xea\x2a\xe7\xad\x91\xc1\xae\x12\xd8\x3e\x4c\x4e\x04\xae\x86\x12\xec\x22\x73\x36\x74\x3e\xbb\x2a\xf8\x17\x2e\x8d\x74\x65\x27\x06\xaa\x28\x13\x5c\x02\xea\xc7\xf0\x56\xdd\xf7\xfb\x41\xdf\xbc\x67\xc0\x36\xcb\xab\x89\xa1\x19\x09\x28\xcb\xce\xee\x03\x97\x35\x5c\xf1\xb2\x24\xe7\xb1\xbe\x56\x1d\xed\x4c\xa8\xcc\x6f\xed\x0a\xc9\xa7\x79\x09\x3b\x5d\x6e\xd5\x36\x56\x83\xa6\x69\x77\xfa\xec\x5a\xa3\xa5\x80\xf8\xb4\x19\xb0\x31\x0a\x36\x19\x23\xb8\x06\xec\xcf\x06\x8b\x76\xd1\x60\x0f\xd4\x75\xac\x04\x76\xe9\xc6\x1a\x0a\x23\x5d\xce\x90\x63\x9a\x92\x4b\x95\x09\x03\xa9\x8d\x9a\x85\x7f\xa3\xc4\x87\x3c\xd2\x48\x9a\x07\x2e\xd7\x66\x07\xda\xac\xde\x1a\x5d\x34\x2e\x90\x42\x7f\xb3\xae\x25\x29\x76\x37\xa1\x43\x82\xc3\x9f\x50\x16\x4c\xce\x53\x58\xb8\xa1\x88\x28\xbf\x11\xac\x4e\x20\x9b\x83\x2b\xe3\x23\x6b\x76\x9b\xee\xe8\x68\x06\xb8\xed\xf9\xb7\x1d\xc8\xfc\x8c\x79\x01\xe3\x7a\x72\xa5\x33\x37\x45\xe4\x85\x4d\xde\x96\x46\x28\x2b\x55\xd4\x95\xa0\x7e\x65\x1a\x4b\x54\x01\xf1\x3e\xf2\x18\xbd\xd8\x4f\x65\x34\xab\x6c\x98\xbf\xac\x48\x3c\x4a\xed\x23\xbd\xa7\x82\x19\x1d\xa4\xf9\x68\x4b\x1d\x7a\x4e\x92\x9b\x96\x67\x7b\xa0\x9b\xf5\x21\x6a\xde\x41\x7b\x24\x63\x77\x30\x03\xc7\x6e\x9c\x4d\x13\xba\x08\x3e\xea\x59\xd4\x81\xe2\x6c\x26\x49\x12\x27\x37\x29\xa7\x6a\xc1\xb4\xe2\x02\xe9\x5d\xc5\xa5\x4f\x93\x37\x15\xd1\x24\xfc\x3d\x5a\xbd\x6f\x6d\x75\x0c\x87\xac\xfa\x26\x93\x37\xc6\x5c\xeb\x8f\x7a\xe6\x66\x11\x6f\x11\xcb\xe6\xf8\x98\x35\x37\x18\xbd\xf1\xd4\xa1\xf5\xd4\x65\x5c\xcd\xed\x14\x1f\x83\xb3\x29\x28\x66\xa7\x60\xe0\xb0\xc2\x37\x85\xbb\xb5\x7c\x6d\xad\x86\xd1\x27\x62\x75\xd7\x5c\x06\xe4\x24\xbe\xa3\xfa\x43\xb5\x19\x99\xed\x73\xcf\x07\x66\x3d\x0e\xab\x77\x48\xef\xd3\x01\x5b\x22\xbe\x96\xf1\xa9\xec\x6e\xee\x17\x37\xc6\xe6\x01\xb5\x31\xf6\xec\x37\x47\x35\xf3\xda\x1e\xe2\x34\x9f\xb1\xa1\x73\x7e\x6f\x03\xed\x9c\x16\x3c\xf7\x6c\x6b\xff\x7f\x9a\xe9\xd3\xdc\x82\x79\xf9\x93\xcd\x3f\xca\xda\x74\x7a\xcd\x4a\xc8\xee\x73\x6d\x19\xfe\x3f\x00\x00\xff\xff\x91\xaf\xbf\x71\x9e\x17\x00\x00")

func models17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_models17_upsertGoTpl,
		"models/17_upsert.go.tpl",
	)
}

func models17_upsertGoTpl() (*asset, error) {
	bytes, err := models17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0x24, 0x9, 0xef, 0xa1, 0x63, 0x81, 0x22, 0x16, 0x4c, 0x7a, 0x11, 0xf6, 0x7d, 0xf9, 0x3b, 0x34, 0x0, 0x97, 0x57, 0xfa, 0x50, 0x82, 0x96, 0x31, 0x4b, 0x8a, 0x7b, 0xad, 0x9a, 0x87, 0xbd}}
	return a, nil
}

var _modelsSingletonPsql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6b\xe3\x38\x14\x7d\x96\x7e\xc5\xad\xa0\xd4\x06\xe1\x6e\x5f\x17\xf2\xd0\xc6\x6e\x37\x4b\xb0\x9b\xd8\xde\x1d\x18\xe6\x41\xb6\xaf\x53\x81\x63\x67\xf4\xd1\x99\x32\xcd\x7f\x1f\xe4\xd8\x75\xda\x74\x28\x85\xa0\x04\xdd\x7b\x8e\xce\x3d\x3a\xca\xe5\x25\x14\x56\x36\x55\xbe\xd3\xa8\xcc\xca\xa2\x7a\xba\xef\xb4\xd9\x28\xd4\x87\x82\x06\x01\xe9\x6a\x09\xda\x08\x83\x5b\x6c\x0d\x68\xa3\x64\xbb\x01\xab\xdd\x6a\x1e\x10\x6c\x8f\x0d\x85\x11\xb0\x53\xdd\xa3\xac\xb0\x0a\x68\x6d\xdb\xf2\x8f\xd4\x5e\x25\x05\x54\xc2\x88\x42\x68\x0c\x42\x29\x1a\x2c\x0d\x07\x23\x8a\x06\x63\xb1\xc5\xe1\x0c\x0e\x76\x57\x09\x83\x49\x3b\xef\xda\xba\x91\xa5\x81\xa2\xeb\x1a\x0e\x0a\xcd\x58\xe3\x50\x0e\x35\x0e\x3f\x1e\xa4\xc1\x46\x6a\x03\x5f\xbf\x1d\x18\xfc\x51\xed\x2f\x4a\xc6\x3e\x98\xb9\xcd\xad\x68\x37\x0d\x06\x8b\x0a\x5b\xb3\xb2\x9d\xc1\xb4\x91\x25\x3a\x61\xc1\x72\xc5\xc1\x7d\xaf\x57\x13\xb9\x4f\xc9\xc4\xfe\x19\x82\x17\x94\x4f\x89\xc2\xcf\x61\x15\x1a\x9f\x52\x52\xd8\x1a\xfe\x3e\xc6\xdd\xa1\xb9\xb1\x75\x8d\xca\xf3\x29\xa9\xb0\x46\x75\x54\xbc\xb7\x63\xb1\xb0\xb5\x83\x97\x5d\x63\xb7\xad\x76\x14\x2c\x8c\x6e\xaf\xf3\x65\x06\xff\x5d\x2f\xf3\x28\x65\x94\xc8\x1a\x1a\x6c\xbd\x49\x25\x9c\xcd\xe0\x2f\x67\xd7\x0b\x6e\x06\xf5\xd6\x04\xe9\x4e\xc9\xd6\xd4\x1e\xf3\xce\xb5\x3f\xe0\xc1\xfd\x66\x9c\x12\x42\x0e\x36\xeb\xe0\xdf\x4e\x1e\xb1\x71\x60\x1c\x98\x3f\x76\x8c\x0a\x1b\x51\xe2\x43\xd7\x54\xa8\xfa\x24\x04\xb9\xc6\x45\x5b\xe1\xcf\xe3\x02\x7f\xa3\x8b\xc3\x15\x87\x2b\xdf\xa7\x64\x4f\x29\x71\x8a\x6e\x07\x45\x94\x38\x87\xdc\x19\x6c\x11\xa7\xd1\x3a\x83\x45\x9c\x25\x70\xae\xdd\x27\x89\x61\x9e\xc4\xb7\xcb\xc5\x3c\x83\x5e\xe9\x4b\xc6\xf8\x34\x22\xa7\xc4\x19\x25\x6b\x38\x3b\x09\xdc\xf3\x73\x2f\xe4\xb0\xef\xc3\x6c\x74\xa7\xb0\x75\xf0\xbf\x92\x06\xd3\x7e\x72\x8f\x85\x09\xc4\x49\xf6\xcf\x22\xbe\x63\x4e\x24\x60\xa3\xf1\x75\xe7\xcd\x93\x41\xef\xc2\xbb\xf0\xdf\x81\xbf\xf2\x6f\x4a\x74\x6f\xdf\x7b\xfd\xcc\x87\x30\x81\xfc\x3e\xbc\xce\x22\x48\xa3\x0c\x98\x9b\x80\xd4\x9d\x02\xc9\xe1\xd1\x5d\xb6\x12\xed\x06\x87\x57\xd2\x0b\x71\x03\xca\xe9\x7e\x4f\x94\xf1\x5e\x19\xd9\xbb\xe5\xbb\x4b\x65\xf5\x3a\x76\x53\x5c\x4f\x92\xfa\xd8\x23\xdf\x8a\x3c\x90\xbc\x5b\x62\x30\x83\xe8\xcb\x7c\x99\x87\x51\x18\xb0\x0f\xd0\xfb\xc3\xa5\x0f\x59\x75\xaf\x62\x9a\xe2\x94\x78\x1d\x65\xf9\x3a\x5e\xc4\x77\xc0\x3e\x74\xba\xff\x23\x19\x4d\x76\x67\x28\x34\x56\xb5\xe0\x40\x43\xbf\x4f\xf7\xf4\x77\x00\x00\x00\xff\xff\x27\xb5\xbb\xe1\x26\x05\x00\x00")

func modelsSingletonPsql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_modelsSingletonPsql_upsertGoTpl,
		"models/singleton/psql_upsert.go.tpl",
	)
}

func modelsSingletonPsql_upsertGoTpl() (*asset, error) {
	bytes, err := modelsSingletonPsql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models/singleton/psql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0xa6, 0xcb, 0x14, 0x76, 0x68, 0x35, 0x8d, 0x58, 0x84, 0xeb, 0xe0, 0x75, 0xa3, 0xf4, 0x48, 0x62, 0x9f, 0xd7, 0x35, 0x22, 0x11, 0xbd, 0x96, 0xfa, 0x80, 0x27, 0xf8, 0xc8, 0x22, 0x24, 0x22}}
	return a, nil
}

var _models_testSingletonPsql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6f\xe3\xb8\x11\xfe\x2c\xfd\x8a\x39\x03\x39\x48\x5b\x87\x3e\xf4\xe5\x4b\x0e\xc6\x21\x71\x9c\x74\x71\xd9\x24\x6b\xbb\x3d\x14\xdd\xf6\x8e\x96\x46\x0e\x11\x89\x64\x48\x2a\x59\xf7\x90\xff\x5e\x0c\x29\xd9\xb2\x63\x25\xdb\x6e\x0b\xdc\xa7\x84\xe4\x33\xef\x0f\x87\x23\x3f\x72\x03\x66\xf5\xf9\xf6\xf2\xe2\x1e\xd7\x30\x06\x83\x2b\xfc\xac\xd9\x87\xda\xba\x89\xaa\xb4\x28\x31\xf9\x25\xf9\xa1\x4a\xff\x79\x7a\xb5\x98\xce\x60\x71\x7a\x76\x35\x05\xf6\xee\x93\xfc\x64\x7f\x77\x7a\x7e\x0e\x93\x9b\xeb\xf9\x62\x76\xfa\xfe\x7a\x01\xec\xdd\x0f\x70\x71\x33\x9b\xbe\xbf\xbc\x86\x1f\xa7\x7f\xa3\xf5\xf7\x9f\xe4\x2f\x69\x1c\xbb\xb5\x46\xd0\xab\x05\x5a\x87\x06\xac\x33\x75\xe6\xe0\xd7\x38\xca\x97\x13\x25\x25\xbc\xb3\x0f\x25\x3b\x3f\x8b\x69\xe3\x9a\x57\x08\x04\x11\x72\x15\x47\x77\xca\x3a\x80\xed\xba\xb6\x68\xba\x6b\xcd\xad\xed\xae\xad\x2d\x2b\x95\xe3\xf6\x5c\x19\x2f\x2f\xa4\x8b\xe3\x48\xaf\x6e\xb9\xb5\x17\xa2\xdc\x00\xe2\xc8\xa1\x75\xe7\x67\xde\xea\x46\xc9\xbd\xd0\xf3\x8f\x57\x93\x2a\x87\xa5\x52\x65\xfc\x1c\xc7\x45\x2d\x33\x10\x52\xb8\x24\x0d\x7e\x7f\xe0\x42\xc2\x18\xbe\x6d\x83\xfa\xf5\x99\x60\xa3\x11\x58\x74\xb5\x86\xbc\xae\xb4\x05\x77\x87\x90\x73\xc7\x97\xdc\x22\xd8\xec\x0e\x2b\x0e\x5c\xe6\x20\x2a\xf2\xcb\x82\x70\xe4\x98\x02\x0e\x0e\x69\x8b\x9b\x35\x18\x2e\x73\x55\x95\x6b\xd2\xb5\x42\x89\x86\x3b\xcc\x81\xbc\xec\xa8\x52\xe0\xee\xb8\xf3\xbb\x16\x32\x2e\x61\x89\x60\x6a\x09\x7c\xc5\x85\xb4\x8e\x14\xd7\x56\xc8\x15\x79\xb0\xab\xc8\x3e\x94\x4b\x25\x4a\x34\x70\x33\xfb\x00\x9a\x67\xf7\x7c\x85\x2c\xc4\x97\x68\x78\xd7\xc6\x93\x86\x40\x92\x14\xd0\x18\x65\x28\x68\x62\x0a\x1a\x13\x36\xe2\x38\x7a\x14\x1a\x0d\x9b\xa3\x3b\xc7\x82\xd7\xa5\x4b\x06\x9a\xea\x18\xe2\x1c\x0c\x61\xa0\xeb\x65\x29\xb2\x41\xda\x0b\xa5\x2c\x0c\x86\xf0\xa7\x3f\xfe\xe1\xf7\xfd\xa0\xa6\xa4\xa4\xd0\xe0\x43\x2d\x0c\x0e\x52\xaa\x25\x6b\xb8\x32\x86\x20\x78\x89\x6e\xee\x0b\xd8\xc8\xe5\x4b\xc9\x2b\xc2\x46\x9a\x79\x1a\xf5\x01\xe9\x30\xc0\x3c\xbb\xfa\x60\x74\x18\x60\x9e\x74\x7d\x30\x3a\x6c\x60\xc4\xbd\x0e\xec\xbd\xdc\x89\xdb\x63\x5a\xbe\xf6\x69\x6b\x83\xf7\xe0\x0e\x55\xfb\xf0\x04\xe9\x06\xde\xa1\x72\x47\xe4\x4c\xa9\xb2\x35\x70\x2f\xe8\x6f\x56\xe5\x3e\xab\x54\xdf\x31\x3c\xf2\x92\xb3\x33\x5c\x09\xf9\x57\x5e\x8a\x9c\x3b\xa1\x64\x92\xb2\x66\x81\x49\x1c\x45\x1e\x12\x4c\x5f\x2b\x37\xad\xb4\x5b\x27\x21\x81\x54\xf8\x6d\xbe\x86\xbd\x58\x4a\x7b\x8b\x0d\x25\xd8\x60\xaf\x95\x4b\xfc\x3f\xd3\x87\x9a\x97\x36\x09\xb9\x1c\xc2\x77\x2d\x3e\x24\xf0\x15\xe5\x81\x1b\x2d\xbc\xcd\x48\x3f\xbe\xc9\x73\x2b\xb0\x49\xfb\x30\x8e\x52\x36\xb9\xc3\xec\x3e\xa1\xf4\x88\xc2\xdf\x80\x6f\xc6\x20\x45\x49\x77\x22\x32\xe8\x6a\x23\x69\x37\x8e\x9e\xe3\x38\x1a\x8d\x40\x14\x20\x95\xbf\x9b\x74\x03\xcf\xcf\x80\x28\x81\xb9\x97\x2e\x51\x26\xdd\x42\xa6\x30\x1e\xc3\x77\x5e\xd3\x68\x04\x13\x83\xdc\x21\xf0\xa6\x09\x88\x7f\x61\x0e\xf9\x12\xc8\x79\x16\x47\xfb\x0c\xd8\x80\xd8\xdc\xf1\x65\x89\xe1\x60\x13\x7c\x1a\x1c\x6a\x5c\x1e\x83\x66\x15\xbf\xc7\xdb\xcb\xb6\x05\x26\xe9\xf7\x6f\x05\x23\x0a\xf8\x66\x87\x43\x04\xea\x28\xcc\x8d\xd2\x0b\xef\xd2\x01\x65\x3b\xda\xa2\xe7\x5d\xc9\xcc\x47\xfa\xc5\xb2\x71\x14\x51\x47\x25\x17\x4e\xc6\x80\x9f\x31\x63\x13\x55\x55\x5c\xe6\xc9\x40\xaf\x7e\xa6\x33\xea\x0f\xc7\xc7\xa1\xf9\x1c\x2b\x59\xae\x07\x43\xe8\xa4\xa2\x95\x67\x53\xf9\x08\x63\xe0\x5a\xa3\xcc\x13\x65\x69\x2d\x0c\xd1\x9b\xe0\x7a\x35\x95\x8f\x49\xca\x18\x23\x91\xe0\xe4\x61\xa3\xf6\xa1\xf4\x06\x3a\xa5\xec\x4a\x7c\xb9\x19\x4a\xfb\x10\x9e\xc8\x84\x50\xec\x56\x68\x4c\x3a\xee\xce\x5d\x4e\xa9\x39\x19\xc3\xb7\xcb\xb5\x43\xcb\xce\xea\xa2\xf0\xaf\x4d\xc7\x58\x3f\xa8\x13\xf7\xdc\xe5\xaa\xa6\x7e\xf4\xb4\xbb\x19\x2a\xb2\x63\x2e\xde\x89\x64\xee\x72\xff\xd4\x49\x7c\xba\xf8\x11\xd7\xe7\x68\x9d\x51\x6b\x34\xc9\x66\x6a\x18\x82\x49\xf7\x45\x82\xda\x3d\x17\xe3\x2e\x09\xb6\x3e\x70\xe3\x5e\xe7\x80\x32\x96\xfd\x64\xb8\x4e\xd0\x50\x7b\x29\xb8\x28\xe9\x4d\x54\x60\x49\x16\x1a\x06\x40\x16\xaa\x43\x9d\x6f\x97\x6f\x5d\xcf\xbe\xda\x98\x7d\x28\xf7\x2c\x1d\x8a\xea\x27\x2e\x0e\xda\x29\x2a\xc7\x6e\x8d\x90\xae\x94\x64\x20\xdd\xdf\xdb\x29\x44\xd3\xa7\x92\x34\xfd\x42\x17\x9f\xb8\x70\x50\x28\xd3\x93\x92\x38\x8a\x7e\x26\x06\xb0\x49\xa9\x2c\x26\x29\x8c\x46\x70\x5a\xd0\x48\xd6\xde\x2e\x61\x21\x57\x12\x87\x90\x11\xc2\x0f\x30\x4f\x46\x38\x04\x94\x39\xa8\xc2\x6f\x68\xa1\x31\x3e\x9c\xde\xff\x36\xea\x3d\x9e\x7c\x45\xdc\x2f\xab\xe3\xe3\x6e\x74\x48\xb1\x9d\xe6\x76\xa7\x1d\x53\xcb\x49\x95\x27\x96\xc8\x3e\x6c\x35\x34\x13\xe1\x10\xb8\x59\x59\x60\x8c\x85\x75\x67\x26\xca\x0e\x34\x87\x46\x38\x48\x85\x56\x92\xfd\x67\x1d\xa1\x79\x28\xbc\x33\x29\x25\x32\xbc\x10\x59\xe7\x36\x06\x4f\x2c\xbb\xc6\xa7\x19\xf2\x1c\x4d\x83\x0e\xe1\xda\x70\xd9\x0f\xb5\x0d\xdb\xdf\x51\xb2\x6e\x9b\x08\x2a\x36\x9b\xa1\xd2\x41\x78\xf3\xa8\x9c\x8c\x81\x8e\x67\xb5\x3c\x50\xf4\x6e\x7d\xdb\x52\x99\x5a\x4a\x21\x57\x27\x83\x4d\x8a\x43\x96\xd2\x3d\x7c\x30\xbe\x43\x83\xbd\xe3\x7d\x96\xec\x3f\x5d\x6f\x16\xbc\xc9\x38\xfc\xfd\x1f\x21\x95\xe4\x73\x23\xd4\x6e\xb5\x51\xcc\x35\xd9\x2d\x92\xc1\xed\xe5\x9f\x6f\xe6\x8b\xf1\x91\xf5\xad\x9f\x86\x16\x3f\x52\xec\x61\x6e\x6f\x66\x8b\xf1\x51\xee\x31\x34\xa8\x1c\xc2\xfc\x65\x3e\x9d\xb5\x7a\x68\x50\x3a\xa8\xe7\x74\x3e\xbf\x78\x7f\x35\x6d\x71\xdb\xaf\x17\x42\x3f\xf7\xc4\xb5\xff\xc8\x6f\xb9\xea\x2a\x3d\x6c\xcb\x26\x54\xed\x44\xc9\x16\x58\x69\x0f\x1b\xf8\x79\x7d\xd5\x0e\xaf\xaf\xcd\x39\xbd\x97\x30\x5c\x62\x50\x9a\xc6\x45\x28\x44\xe9\x67\x50\x2a\x06\x05\x76\xd1\x04\xe6\xbd\x18\x1c\xd9\x93\xa3\xfc\x44\x2b\xeb\x56\x06\xed\x49\x27\xa3\x6d\xd6\x36\x99\xe9\xcc\x4d\xe4\x5e\xe7\x3e\xbc\x54\xdb\x2a\xf2\x40\xb2\xdd\xc1\x94\x92\x40\xe9\x2b\xee\x1c\xf5\x3a\xd2\x8e\x93\xbf\x21\x97\xb6\x83\xc7\xff\xd1\xad\x2e\xe9\x60\x0c\xae\xd2\xcc\xcf\x98\xe9\xe6\xae\xd0\x56\xf3\x9a\xf4\x10\x72\x77\xd4\xdb\xd2\xb1\x51\xa0\x59\xd3\x7a\x3d\x05\x03\x38\x5f\xbe\x98\xad\x0e\xeb\xee\x0e\xa0\x6f\x68\x26\xa8\xd7\x3b\x38\x3e\x16\xc5\x31\x7e\x16\xd6\xd9\x43\x66\x46\x23\x70\xc8\x4d\xae\x9e\xa4\xef\xeb\xb5\x43\x0b\x59\x89\x5c\xd6\x1a\x1c\xb7\xf7\x16\x9e\xee\x50\xfa\xa7\x30\x7c\x80\x17\x42\x0a\x7b\xd7\x36\xb7\x43\x7e\xb6\x0a\xfb\x3f\xa7\x77\xc6\x6a\xff\xab\x48\x9b\xd6\x37\xa6\xf4\xa8\xc5\x83\x47\xfc\xcf\xa7\xf6\x4e\x33\x55\x96\xcd\xb0\x52\x8f\xf4\x8d\xd1\x69\x46\x7d\x75\x57\x92\xe2\x4d\x9a\x1f\x77\x86\x21\x50\xff\xf3\x89\x28\x36\x51\x1e\x08\xac\x3d\x1a\xfa\x78\xbc\x03\x7b\xb9\xda\x22\x9a\x67\xe9\xa1\x64\x37\x1a\x65\x32\x68\x3b\xca\x60\x08\xb9\x11\x8f\x68\xd8\xed\xfc\xe3\xd5\x59\x2d\xca\xfc\x63\x8d\x66\xdd\x3c\x19\xed\x97\x6a\xe0\xff\xcb\xeb\xb4\x7f\xd9\x9a\xef\xc1\xf4\xb5\xd6\x28\x45\x39\x7c\xf1\xfe\xec\xc6\xf2\x1c\xff\x3b\x00\x00\xff\xff\xa1\x67\x61\x83\x6e\x13\x00\x00")

func models_testSingletonPsql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_models_testSingletonPsql_main_testGoTpl,
		"models_test/singleton/psql_main_test.go.tpl",
	)
}

func models_testSingletonPsql_main_testGoTpl() (*asset, error) {
	bytes, err := models_testSingletonPsql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models_test/singleton/psql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd4, 0x99, 0x16, 0x85, 0x72, 0x61, 0x66, 0xa7, 0x45, 0xbb, 0x44, 0xea, 0xe5, 0xf, 0x43, 0xb6, 0xe3, 0x86, 0x70, 0xcd, 0x74, 0x56, 0x24, 0x39, 0x7b, 0xdb, 0x45, 0xd3, 0x93, 0xdd, 0x42, 0xd1}}
	return a, nil
}

var _models_testSingletonPsql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\xca\xc2\x30\x10\x85\xf7\x3d\xc5\x50\xb2\x68\x7f\xda\x1c\xe0\x07\x17\x82\x1b\x5d\x88\x48\x7b\x80\xd1\x4e\x4b\x20\xc6\xd2\x99\x82\x10\x72\x77\x49\x53\xa5\x0b\x97\x1f\x6f\xde\x97\x97\x7e\x76\x77\x68\x88\xa5\x1d\x99\x26\x29\x04\xfe\x84\x58\x8c\x1b\x74\x53\x82\xcf\x00\xbc\xaf\x61\x42\x37\x10\x28\xe3\x3a\x7a\x55\xa0\x04\x6f\x96\xe0\x7f\x07\xfa\x80\x82\xba\x89\xc8\x21\xac\xc7\xa6\x5f\x2f\xf4\x91\x4f\x4f\xe3\x96\x18\xea\x6f\x4e\x96\xb7\xa8\xd0\x1a\xe4\x68\x53\x49\xb7\x8f\x4c\x9c\xb4\x1f\xd5\x19\x1f\xb4\x54\x44\x5f\x67\x57\xe4\xde\xa7\x9e\x6e\xc7\x8b\x9d\x27\xb4\x21\xe4\x15\xc4\xe9\x3f\x92\xf4\xb7\x72\x79\x90\x5c\xb7\xdd\xb2\x52\xc8\xde\x01\x00\x00\xff\xff\xc2\xf2\x93\x84\x09\x01\x00\x00")

func models_testSingletonPsql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_models_testSingletonPsql_suites_testGoTpl,
		"models_test/singleton/psql_suites_test.go.tpl",
	)
}

func models_testSingletonPsql_suites_testGoTpl() (*asset, error) {
	bytes, err := models_testSingletonPsql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models_test/singleton/psql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x14, 0x5a, 0x2f, 0x93, 0x2a, 0x92, 0xeb, 0xe5, 0xb3, 0x40, 0x5f, 0x7e, 0xf9, 0x76, 0xa9, 0xbf, 0x7a, 0xd0, 0x2b, 0xb9, 0xa2, 0x2e, 0x4, 0x84, 0x63, 0x44, 0x9f, 0x2d, 0xd6, 0xa9, 0xc8}}
	return a, nil
}

var _models_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xcf\x6f\xdb\x3a\x0c\x3e\x5b\x7f\x05\x5f\xf0\xde\x83\x3c\xb8\x2a\x76\xed\x90\x43\xda\xf4\x50\x0c\xcd\x82\x26\x39\x0f\xaa\x4d\xa7\x42\x64\xc9\x90\xe9\x25\x99\xa1\xff\x7d\x90\xec\xa6\xbf\xb2\xa2\xc3\x36\x60\x3b\x24\x10\xa9\x4f\x1f\xc9\x8f\xa4\xbb\xee\x04\xfe\x2d\x24\x49\x38\x1b\x83\x98\x86\xc3\x89\xf7\x2c\xba\x2b\x5b\xa0\x8e\xfe\xeb\x78\x3a\x5c\xd8\x9a\x94\x35\x4d\xbc\xfa\x34\x9c\x0f\x97\x52\x2b\x19\xaf\x22\xad\x98\x04\x13\x1b\xb1\x94\xb7\x1a\x07\xce\xde\x10\x33\x59\xa1\xf7\xac\x6c\x4d\x0e\x84\x0d\x75\x5d\xff\x58\xac\xea\xb9\x6e\x9d\xd4\xde\xaf\xea\x06\x1d\x71\x82\x77\x01\xa0\xcc\x5a\x2c\x53\xe8\x58\x42\x62\x2e\x9d\xd4\x1a\x35\x4f\x19\x4b\x54\x09\x1a\x0d\x3f\x10\x4c\xed\xd6\x2c\x94\x59\xb7\x5a\x3a\xef\x27\x5a\x5f\x58\xdd\x56\xa6\x49\x61\x3c\x7e\x0d\x39\x77\xaa\x92\x6e\xff\x11\xf7\x87\x07\x1d\x4b\x12\x12\x8b\x8d\xaa\xf9\x28\xfc\xd7\xca\xac\x81\x62\x31\x5b\x45\x77\x60\x8d\xde\x43\xdd\xbf\x83\x0d\xee\x21\xef\x5f\x8e\x52\x96\x78\xc6\x92\x06\xb1\x08\x6a\x38\x69\x0a\x5b\xa9\xaf\x28\x66\xb8\x5d\x20\x16\x3c\x65\xc9\x17\xe9\x00\x5d\xfc\x59\xc7\x92\xd3\x53\x98\x10\x61\x55\x13\xd0\x1d\xc2\xd5\x6c\x71\x79\xb3\x84\x46\x15\x08\xb6\x04\x69\x60\x35\x0f\x1e\x96\xd8\xc0\xf8\x48\xae\x87\x0a\x3a\x1f\xd5\x08\xa4\x8f\x63\x2e\xc8\xb5\x39\xf1\x90\x4c\x06\xff\xdb\x0c\xbe\x23\xc0\xf4\x7c\xb9\xaf\xb1\xc9\x80\x5c\x8b\xe9\x87\xc8\xf3\xcf\x18\x8c\xd2\x83\x10\x97\x21\xd3\x92\x8f\x56\x26\x4a\x40\xf6\x21\xc8\xf1\x84\xa0\x89\xa1\xcf\xe0\xbf\x66\x94\x05\xbe\x41\x97\xae\x53\x25\x18\x4b\xc3\x98\xcc\xec\x85\x35\x84\x3b\xf2\x3e\xa7\x5d\x28\x2f\xef\x6d\x71\x2e\xf3\xcd\xda\xd9\xd6\x14\x3c\xed\x3a\x34\x85\xf7\x2c\xe9\x21\xd7\x6d\x43\xcb\x1d\x8f\x54\x2f\x68\x8e\x7b\x1b\x55\x55\xe8\xc4\x39\xae\x95\x89\x7c\xba\xc1\xa7\xde\xe5\x8e\xe7\xb4\xcb\x42\xcd\xf7\xf1\xde\x08\x4b\x59\x52\x60\x89\x0e\xc2\x44\xf3\x14\x3a\xf8\x0c\x63\xa0\x9d\xb8\xb1\x5a\xdf\xca\x7c\xc3\x53\xf0\xa1\xed\x87\x06\x59\x31\x0c\xf8\xab\x6a\x84\x6e\xa1\x29\xc2\x8a\x41\xb0\x4a\xa9\x1b\x8c\x91\x33\x18\x52\xba\x32\x25\x3a\x9e\x3e\xb7\xdf\xd6\xc1\x36\xe6\x70\xbc\x7d\x2f\xfa\x96\xdb\xd6\x50\x74\x3c\x9b\xc1\xfb\x95\xe5\xa9\xb8\x08\x98\x1f\xa9\xe9\x41\x93\x97\xa9\xf2\xfb\xd8\x01\x12\xa3\x07\xd0\xfb\x27\x90\xd1\x56\x1a\x02\x6b\x10\x1c\xe6\xd6\x15\x19\xac\x2d\x9d\x8d\xb2\x1e\x3f\x64\xfe\x6c\xbb\x56\xf3\xe9\x64\x79\x79\x6c\xbb\x7e\xc5\xfe\x0c\x3d\x7a\xeb\x77\x46\x08\xf1\x5b\xb7\xed\x27\x27\x2e\x7c\x0d\xfe\x80\x81\xfb\x9b\xe6\xcd\xb3\x6f\x01\x00\x00\xff\xff\x3c\x0d\x7c\xea\x5b\x07\x00\x00")

func models_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_models_testUpsertGoTpl,
		"models_test/upsert.go.tpl",
	)
}

func models_testUpsertGoTpl() (*asset, error) {
	bytes, err := models_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb8, 0x90, 0x83, 0xed, 0x55, 0xca, 0x66, 0x7a, 0x72, 0xa8, 0x9, 0xdd, 0xa, 0x1a, 0x56, 0xcf, 0x76, 0x6b, 0x80, 0x8c, 0x5c, 0xaf, 0x13, 0xce, 0xd2, 0x43, 0x39, 0xf5, 0x1e, 0x88, 0x1b, 0xb7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"models/17_upsert.go.tpl":                       models17_upsertGoTpl,
	"models/singleton/psql_upsert.go.tpl":           modelsSingletonPsql_upsertGoTpl,
	"models_test/singleton/psql_main_test.go.tpl":   models_testSingletonPsql_main_testGoTpl,
	"models_test/singleton/psql_suites_test.go.tpl": models_testSingletonPsql_suites_testGoTpl,
	"models_test/upsert.go.tpl":                     models_testUpsertGoTpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"models": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{models17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"psql_upsert.go.tpl": &bintree{modelsSingletonPsql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"models_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"psql_main_test.go.tpl":   &bintree{models_testSingletonPsql_main_testGoTpl, map[string]*bintree{}},
			"psql_suites_test.go.tpl": &bintree{models_testSingletonPsql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{models_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
